package egovframework.com.ext.jstree.support.util;

import java.io.UnsupportedEncodingException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.lang.StringUtils;
import org.apache.commons.net.util.SubnetUtils;
import org.apache.commons.validator.routines.InetAddressValidator;

public class Text {
    
    private static DecimalFormat oneDecimal = new DecimalFormat("0.0");
    
    private Text() {
    }
    
    public static String nl2br(String str) {
        if (StringUtils.isEmpty(str)) {
            return "";
        }
        String temp1 = StringUtils.replace(str, "\r\n", "<br id='check' />");
        return StringUtils.replace(temp1, "\n", "<br />");
    }
    
    public static long ipToLong(String ip) {
        String[] addrArray = ip.split("\\.");
        
        long num = 0;
        for (int i = 0; i < addrArray.length; i++) {
            int power = 3 - i;
            
            num += ((Integer.parseInt(addrArray[i]) % 256 * Math.pow(256, power)));
        }
        return num;
    }
    
    public static long[] ipToLong(String ip, String mask) {
        if (StringUtils.isEmpty(mask) || StringUtils.equals(mask, "0")) {
            mask = "32";
        }
        SubnetUtils subnetUtils = new SubnetUtils(ip + "/" + mask);
        
        String sipString = subnetUtils.getInfo().getAddress();
        String dipString = subnetUtils.getInfo().getAddress();
        
        if (!StringUtils.equals(mask, "32") && !StringUtils.equals(mask, "31")) {
            sipString = subnetUtils.getInfo().getLowAddress();
            dipString = subnetUtils.getInfo().getHighAddress();
        }
        
        long[] ips = { Text.ipToLong(sipString), Text.ipToLong(dipString) };
        return ips;
    }
    
    public static long[] ipToLong2(String ip) {
        if (StringUtils.contains(ip, "/")) {
            String[] temp = StringUtils.split(ip, "/");
            return ipToLong(temp[0], temp[1]);
        } else {
            return ipToLong(ip, "32");
        }
    }
    
    public static long versionToLong(String versionText) {
        String[] versionArray = versionText.split("\\.");
        
        if (versionArray == null || versionArray.length != 5) {
            return Long.MAX_VALUE;
        }
        
        long num = 0;
        try {
            for (int i = 0; i < versionArray.length - 1; i++) {
                int power = 4 - i;
                
                num += ((Integer.parseInt(versionArray[i]) % 99 * Math.pow(99, power)));
            }
            
            num += ((Integer.parseInt(versionArray[4]) % 99999 * Math.pow(99999, 0)));
        } catch (NumberFormatException nfe) {
            return Long.MAX_VALUE;
        }
        return num;
    }
    
    public static String longToIp(long ip) {
        return ((ip >> 24) & 0xFF) + "." + ((ip >> 16) & 0xFF) + "." + ((ip >> 8) & 0xFF) + "." + (ip & 0xFF);
    }
    
    public static boolean isIpv4(String ip) {
        return InetAddressValidator.getInstance().isValidInet4Address(ip);
    }
    
    public static String convertCommmaForString(String value, String seperator) {
        List<Integer> arrList = new ArrayList<>();
        String result = "";
        
        String[] key = StringUtils.split(value, seperator);
        for (String keyTemp : key) {
            arrList.add(Integer.parseInt(StringUtils.trim(keyTemp)));
        }
        
        Collections.sort(arrList);
        
        if (arrList.size() > 0) {
            int start = arrList.get(0), last = arrList.get(0);
            List<String> resultList = new ArrayList<>();
            
            for (int i = 1; i <= arrList.size(); i++) {
                if (i == arrList.size() || arrList.get(i) != last + 1) {
                    if (start == last) {
                        resultList.add(String.valueOf(start));
                    } else {
                        resultList.add(start + "-" + last);
                    }
                    
                    if (i != arrList.size()) {
                        start = last = arrList.get(i);
                    }
                } else {
                    last = arrList.get(i);
                }
            }
            result = StringUtils.join(resultList, ",");
        }
        
        return result;
    }
    
    public static String convertDashForString(String value, String seperator) {
        List<Integer> arrList = new ArrayList<>();
        String result = "";
        
        String[] key = StringUtils.split(value, ",");
        
        for (String keyTemp : key) {
            String[] key2 = StringUtils.split(keyTemp, "-");
            if (key2.length > 1) {
                for (int i = Integer.parseInt(StringUtils.trim(key2[0])); i <= Integer.parseInt(StringUtils.trim(key2[1])); i++) {
                    arrList.add(i);
                }
            } else {
                arrList.add(Integer.parseInt(keyTemp));
            }
        }
        Collections.sort(arrList);
        result = StringUtils.join(arrList, seperator);
        
        return result;
    }
    
    public static String urlEncode(String src) {
        if (null == src) {
            return null;
        }
        String result = null;
        try {
            result = java.net.URLEncoder.encode(src, "UTF-8");
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        return result;
    }
    
    public static String convertFormat(long number) {
        long absNumber = Math.abs(number);
        double result = number;
        String suffix = "";
        if (absNumber < 1024) {
        } else if (absNumber < 1024 * 1024) {
            result = number / 1024.0;
            suffix = "k";
        } else if (absNumber < 1024 * 1024 * 1024) {
            result = number / (1024.0 * 1024);
            suffix = "m";
        } else if (absNumber < 1024 * 1024 * 1024 * 1024) {
            result = number / (1024.0 * 1024 * 1024);
            suffix = "g";
        } else {
            result = number / (1024.0 * 1024 * 1024 * 1024);
            suffix = "t";
        }
        return oneDecimal.format(result) + suffix;
    }
    
    public static String md5(String src) {
        if (null == src || 0 == src.length()) {
            return src;
        }
        MessageDigest digest = null;
        try {
            digest = MessageDigest.getInstance("md5");
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException("assert fail - md5 digest");
        }
        byte[] hash = digest.digest(src.getBytes());
        int value = 0;
        StringBuffer sbf = new StringBuffer();
        for (int i = 0; i < hash.length; i++) {
            value = (0x000000FF & hash[i]);
            if (value < 0x10) {
                sbf.append("0");
            }
            sbf.append(Integer.toHexString(value));
        }
        return sbf.toString();
    }
    
    public static String sha1(String src) {
        if (null == src || 0 == src.length()) {
            return src;
        }
        MessageDigest digest = null;
        try {
            digest = MessageDigest.getInstance("sha1");
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException("assert fail - sha1 digest");
        }
        byte[] hash = digest.digest(src.getBytes());
        int value = 0;
        StringBuffer sbf = new StringBuffer();
        for (int i = 0; i < hash.length; i++) {
            // suppression:on
            value = (0x000000FF & hash[i]);
            if (value < 0x10) {
                sbf.append("0");
            }
            // suppression:off
            sbf.append(Integer.toHexString(value));
        }
        return sbf.toString();
    }
    
    public static String getBindType(Map<String, Map<String, Object>> bindTypes, String key, String value) {
        try {
            Map<String, Object> tempObj = bindTypes.get(key);
            if (!tempObj.containsKey(value)) {
                return "EMPTY";
            }
            return (String) tempObj.get(value);
        } catch (Exception e) {
            return "EMPTY";
        }
    }
    
    public static String getBindType(Map<String, Object> bindTypes, String key) {
        if (StringUtils.isEmpty(key)) {
            return "EMPTY";
        }
        try {
            if (StringUtils.isEmpty((String) bindTypes.get(key))) {
                return key;
            } else {
                return (String) bindTypes.get(key);
            }
        } catch (Exception e) {
            return "";
        }
    }
    
    public static String getDateByString(String text) {
        if (StringUtils.isEmpty(text)) {
            return "";
        }
        
        if (StringUtils.length(text) < 8) {
            return "";
        }
        
        return StringUtils.substring(text, 0, 4) + '-' + StringUtils.substring(text, 4, 6) + '-' + StringUtils.substring(text, 6, 8);
    }
    
    public static String getTimeByString(String text) {
        if (StringUtils.isEmpty(text)) {
            return "";
        }
        
        return StringUtils.substring(text, 0, 2) + ':' + StringUtils.substring(text, 2, 4) + ':' + StringUtils.substring(text, 4, 6);
    }
    
    public static String getAliasPrefixTitle(String imgName) {
        if (StringUtils.endsWith(imgName, "_in")) {
            return "ZONE_IN";
        } else if (StringUtils.endsWith(imgName, "_ex")) {
            return "ZONE_OUT";
        } else if (StringUtils.endsWith(imgName, "_dmz")) {
            return "ZONE_DMZ";
        } else {
            return "";
        }
    }
    
    public static boolean checkNormalString(String query) {
        if (StringUtils.isEmpty(query)) {
            return false;
        }
        int len = query.length();
        int i = 0;
        char c = 0;
        while (i < len) {
            c = query.charAt(i);
            i++;
            if (('0' <= c && c <= '9') || ('a' <= c && c <= 'z') || ('A' <= c && c <= 'Z') || ('가' <= c && c <= '힣') || ' ' == c || '\t' == c) {
                continue;
            } else {
                return false;
            }
        }
        return true;
    }
    
    private static int pointToPixel(int point) {
        switch (point) {
        case 8:
            return 11;
        case 9:
            return 12;
        case 10:
            return 13;
        case 11:
            return 15;
        case 12:
            return 16;
        case 13:
            return 17;
        case 14:
            return 19;
        default:
            throw new RuntimeException("Point value must be 8 ~ 14");
        }
    }
    
    /*
     * font 이름으로 font 크기 정보를 담고 있는 테이블을 얻는다. getTextWidth(), limitStringByFontWidth() 메서드에서 사용한다.
     */
    private static int[][] findFontMap(String fontName) {
        String font = fontName.toLowerCase();
        if ("gulim".equals(font)) {
            return gulim;
        } else if ("dotum".equals(font)) {
            return dotum;
        } else if ("batang".equals(font)) {
            return batang;
        } else if ("gungsuh".equals(font)) {
            return gungsuh;
        } else if ("times".equals(font)) {
            return times;
        } else if ("arial".equals(font)) {
            return arial;
        } else if ("tahoma".equals(font)) {
            return tahoma;
        } else if ("verdana".equals(font)) {
            return verdana;
        }
        return gulim;
    }
    
    public static String limitStringByFontWidth(String src, int width, String postfix, String font, int point) {
        if (null == src || 0 == src.length()) {
            return src;
        }
        int[][] fontMap = findFontMap(font);
        
        int size = 0;
        int len = 0;
        int pixel = pointToPixel(point);
        if (!StringUtils.isEmpty(postfix)) {
            for (int i = 0; i < len; i++) {
                size += getFontWidth(postfix.charAt(i), fontMap, pixel);
            }
        }
        int idx = 0;
        len = src.length();
        while (idx < len) {
            size += getFontWidth(src.charAt(idx), fontMap, pixel);
            if (size >= width) {
                break;
            }
            idx++;
        }
        
        if (idx < len) {
            String result = src.substring(0, idx);
            if (!StringUtils.isEmpty(postfix)) {
                result += postfix;
            }
            return result;
        } else {
            return src;
        }
    }
    
    public static int getTextWidth(String src, String font, int point) {
        if (null == src || 0 == src.length()) {
            return 0;
        }
        int[][] fontMap = findFontMap(font);
        
        int size = 0;
        int len = src.length();
        int pixel = pointToPixel(point);
        for (int i = 0; i < len; i++) {
            size += getFontWidth(src.charAt(i), fontMap, pixel);
        }
        return size;
    }
    
    private static int getFontWidth(char c, int[][] font, int pixel) {
        if (c > 127) {
            return pixel;
        }
        if (c >= 32 && c <= 127) {
            return font[pixel - 11][c - 32];
        }
        return (0 == pixel % 2 ? pixel / 2 : pixel / 2 + 1);
    }
    
    private static int[][] gulim = {
            { 4, 3, 5, 7, 7, 10, 7, 3, 4, 4, 5, 5, 3, 5, 3, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 7, 6, 7, 6, 11, 8, 7, 8, 8, 7, 7, 9, 8, 3, 5, 7, 6, 9, 7, 9, 8, 9, 8, 8, 7, 8, 9, 11, 8, 8, 8, 4, 11, 4, 5, 6, 3, 7, 7, 7, 7, 7, 4, 7, 7, 3, 3, 6, 3, 9, 7, 7, 7, 7, 4, 7, 4, 7, 7, 9, 6, 7, 6, 4, 3, 4, 6, 6 },
            { 4, 4, 4, 6, 6, 10, 8, 4, 5, 5, 6, 6, 4, 6, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 8, 6, 8, 6, 12, 8, 8, 9, 8, 8, 7, 9, 8, 3, 6, 8, 7, 11, 9, 9, 8, 9, 8, 8, 8, 8, 8, 10, 8, 8, 8, 6, 11, 6, 6, 6, 4, 7, 7, 7, 7, 7, 3, 7, 7, 3, 3, 6, 3, 11, 7, 7, 7, 7, 4, 7, 3, 7, 6, 10, 7, 7, 7, 6, 6, 6, 9, 6 },
            { 4, 4, 4, 8, 7, 12, 8, 4, 5, 5, 7, 7, 4, 7, 4, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 4, 4, 7, 7, 7, 7, 11, 8, 9, 9, 9, 8, 7, 10, 9, 3, 6, 8, 7, 11, 9, 10, 9, 10, 9, 9, 8, 9, 8, 12, 8, 8, 9, 7, 13, 7, 7, 7, 4, 8, 8, 8, 8, 8, 3, 8, 8, 3, 3, 6, 3, 11, 8, 8, 8, 8, 5, 8, 3, 8, 6, 10, 7, 7, 7, 7, 7, 7, 10, 7 },
            { 5, 5, 5, 8, 9, 11, 9, 5, 6, 6, 7, 8, 5, 8, 5, 6, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 10, 8, 10, 8, 13, 9, 10, 10, 10, 9, 8, 11, 10, 3, 6, 8, 8, 12, 9, 12, 10, 12, 10, 10, 8, 10, 8, 14, 9, 8, 9, 7, 14, 7, 7, 7, 5, 8, 8, 8, 8, 8, 4, 8, 8, 3, 3, 7, 3, 11, 8, 9, 8, 8, 4, 8, 4, 8, 8, 10, 9, 8, 8, 7, 7, 7, 11,
                    7 },
            { 5, 5, 5, 8, 9, 11, 9, 5, 6, 6, 7, 8, 5, 8, 5, 6, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 10, 8, 10, 8, 13, 9, 10, 10, 10, 9, 8, 11, 10, 3, 6, 8, 8, 12, 9, 12, 10, 12, 10, 10, 8, 10, 8, 14, 9, 8, 9, 7, 14, 7, 7, 8, 5, 8, 8, 8, 8, 8, 4, 8, 8, 3, 3, 7, 3, 11, 8, 9, 8, 8, 4, 8, 4, 8, 8, 10, 9, 8, 8, 7, 7, 7, 11,
                    8 },
            { 5, 5, 5, 11, 9, 14, 10, 5, 6, 6, 7, 8, 5, 8, 5, 6, 8, 8, 8, 8, 9, 8, 8, 8, 8, 8, 5, 5, 11, 8, 11, 8, 13, 10, 10, 11, 10, 10, 9, 11, 10, 3, 6, 10, 9, 13, 11, 12, 10, 12, 10, 10, 9, 11, 10, 14, 11, 10, 10, 8, 14, 8, 8, 8, 6, 9, 9, 9, 9, 9, 5, 9, 9, 3, 4, 8, 3, 13, 9, 10, 9, 9, 5, 9, 5, 9, 8, 10, 9, 8, 9,
                    8, 8, 8, 12, 8 },
            { 5, 5, 5, 11, 9, 14, 10, 5, 6, 6, 7, 8, 5, 8, 5, 6, 8, 8, 8, 8, 9, 8, 8, 8, 8, 8, 5, 5, 11, 8, 11, 8, 13, 10, 10, 11, 10, 10, 9, 11, 10, 3, 6, 10, 9, 13, 11, 12, 10, 12, 10, 10, 9, 11, 10, 14, 11, 10, 10, 8, 14, 8, 8, 9, 6, 9, 9, 9, 9, 9, 5, 9, 9, 3, 4, 8, 3, 13, 9, 10, 9, 9, 5, 9, 5, 9, 8, 10, 9, 8, 9,
                    8, 8, 8, 12, 9 },
            { 6, 6, 6, 11, 11, 14, 12, 6, 6, 6, 9, 9, 6, 9, 6, 8, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 6, 6, 12, 9, 12, 11, 18, 12, 11, 12, 11, 11, 9, 12, 11, 3, 8, 11, 9, 15, 12, 13, 11, 13, 11, 11, 10, 11, 11, 15, 11, 11, 11, 9, 17, 9, 11, 9, 6, 10, 10, 10, 10, 10, 5, 10, 10, 3, 4, 9, 3, 15, 10, 11, 10, 10, 6,
                    10, 5, 10, 10, 14, 10, 10, 9, 9, 9, 9, 14, 9 },
            { 6, 6, 6, 11, 11, 14, 12, 6, 6, 6, 9, 9, 6, 9, 6, 8, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 6, 6, 12, 9, 12, 11, 18, 12, 11, 12, 11, 11, 9, 12, 11, 3, 8, 11, 9, 15, 12, 13, 11, 13, 11, 11, 10, 11, 11, 15, 11, 11, 11, 9, 17, 9, 11, 9, 6, 10, 10, 10, 10, 10, 5, 10, 10, 3, 4, 9, 3, 15, 10, 11, 10, 10, 6,
                    10, 5, 10, 10, 14, 10, 10, 9, 9, 9, 9, 14, 10 } };
    private static int[][] dotum = {
            { 4, 3, 4, 7, 6, 10, 7, 3, 4, 4, 5, 6, 3, 6, 2, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 7, 6, 7, 6, 11, 8, 7, 8, 8, 7, 7, 9, 8, 3, 5, 7, 6, 9, 7, 9, 8, 9, 8, 8, 7, 8, 9, 11, 8, 8, 8, 4, 11, 4, 5, 6, 3, 7, 7, 7, 7, 7, 4, 7, 7, 3, 3, 6, 3, 9, 7, 7, 7, 7, 4, 7, 4, 7, 6, 9, 6, 7, 6, 4, 3, 4, 6, 6 },
            { 4, 3, 5, 7, 7, 11, 8, 4, 5, 5, 6, 6, 4, 6, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 8, 6, 8, 6, 10, 8, 8, 9, 8, 8, 7, 9, 8, 3, 6, 7, 7, 11, 8, 9, 8, 9, 8, 8, 7, 8, 8, 10, 8, 8, 8, 6, 11, 6, 6, 6, 4, 7, 7, 7, 7, 7, 3, 7, 7, 3, 3, 6, 3, 9, 7, 7, 7, 7, 4, 7, 3, 7, 6, 10, 6, 6, 7, 6, 6, 6, 9, 6 },
            { 4, 3, 5, 7, 7, 11, 8, 4, 5, 5, 6, 6, 4, 6, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 7, 6, 7, 6, 10, 8, 8, 9, 8, 8, 7, 9, 8, 3, 6, 7, 7, 11, 8, 9, 8, 9, 8, 8, 7, 8, 8, 10, 8, 8, 8, 6, 11, 6, 6, 6, 4, 7, 7, 7, 7, 7, 3, 7, 7, 3, 3, 6, 3, 9, 7, 7, 7, 7, 4, 7, 3, 7, 6, 10, 6, 6, 7, 6, 6, 6, 9, 7 },
            { 5, 5, 5, 8, 9, 10, 8, 5, 6, 6, 7, 8, 5, 8, 5, 6, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 9, 8, 9, 8, 13, 8, 10, 10, 10, 9, 8, 11, 9, 3, 6, 8, 8, 12, 10, 12, 10, 12, 10, 10, 8, 10, 8, 14, 10, 10, 9, 7, 14, 7, 7, 7, 4, 8, 8, 8, 8, 8, 4, 8, 8, 3, 3, 7, 3, 11, 8, 9, 8, 8, 4, 7, 4, 8, 8, 10, 8, 8, 7, 7, 7, 7, 11,
                    7 },
            { 5, 5, 5, 8, 9, 10, 8, 5, 6, 6, 7, 8, 5, 8, 5, 6, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 9, 8, 9, 8, 13, 8, 10, 10, 10, 9, 8, 11, 9, 3, 6, 8, 8, 12, 10, 12, 10, 12, 10, 10, 8, 10, 8, 14, 10, 10, 9, 7, 14, 7, 7, 8, 4, 8, 8, 8, 8, 8, 4, 8, 8, 3, 3, 7, 3, 11, 8, 9, 8, 8, 4, 7, 4, 8, 8, 10, 8, 8, 7, 7, 7, 7, 11,
                    8 },
            { 5, 5, 6, 13, 9, 13, 12, 5, 6, 6, 7, 8, 5, 8, 5, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 9, 8, 9, 8, 16, 10, 10, 11, 10, 10, 9, 12, 10, 3, 8, 10, 9, 13, 11, 12, 10, 12, 10, 10, 9, 11, 10, 14, 11, 10, 10, 8, 14, 8, 8, 6, 5, 9, 9, 9, 9, 9, 5, 9, 9, 3, 4, 8, 3, 13, 9, 10, 9, 9, 5, 9, 5, 9, 8, 12, 9, 8, 9, 9,
                    9, 9, 12, 8 },
            { 5, 5, 6, 13, 9, 13, 12, 5, 6, 6, 7, 8, 5, 8, 5, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 11, 8, 11, 8, 16, 10, 10, 11, 10, 10, 9, 12, 10, 3, 8, 10, 9, 13, 11, 12, 10, 12, 10, 10, 9, 11, 10, 14, 11, 10, 10, 8, 14, 8, 8, 8, 6, 9, 9, 9, 9, 9, 5, 9, 9, 3, 4, 8, 3, 13, 9, 10, 9, 9, 5, 9, 5, 9, 8, 12, 9, 8, 9,
                    9, 9, 9, 12, 9 },
            { 6, 6, 8, 13, 11, 15, 12, 5, 6, 6, 9, 10, 6, 10, 6, 7, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 6, 6, 11, 10, 11, 10, 15, 12, 11, 12, 12, 11, 10, 13, 12, 3, 8, 10, 10, 13, 11, 13, 11, 13, 11, 11, 10, 12, 11, 15, 11, 11, 11, 9, 17, 9, 9, 9, 5, 9, 10, 10, 10, 10, 5, 10, 9, 3, 4, 9, 3, 15, 10, 11, 10, 10, 5,
                    9, 5, 10, 10, 14, 10, 9, 10, 9, 9, 9, 14, 9 },
            { 6, 6, 8, 13, 11, 15, 12, 5, 6, 6, 9, 10, 6, 10, 6, 7, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 6, 6, 10, 10, 10, 10, 15, 12, 11, 12, 12, 11, 10, 13, 12, 3, 8, 10, 10, 13, 11, 13, 11, 13, 11, 11, 10, 12, 11, 15, 11, 11, 11, 9, 17, 9, 9, 10, 5, 9, 10, 10, 10, 10, 5, 10, 9, 3, 4, 9, 3, 15, 10, 11, 10, 10, 5,
                    9, 5, 10, 10, 14, 10, 9, 10, 9, 9, 9, 14, 10 } };
    private static int[][] batang = {
            { 4, 3, 4, 6, 6, 9, 8, 3, 4, 4, 6, 6, 2, 6, 2, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 6, 6, 6, 6, 10, 9, 8, 8, 8, 7, 6, 9, 8, 4, 5, 8, 6, 9, 8, 8, 7, 8, 8, 7, 7, 8, 7, 10, 7, 7, 7, 4, 11, 4, 6, 6, 3, 7, 7, 6, 7, 6, 4, 7, 6, 3, 3, 6, 3, 9, 6, 6, 6, 6, 5, 6, 4, 6, 7, 9, 6, 6, 6, 4, 3, 4, 6, 6 },
            { 4, 4, 5, 7, 7, 10, 9, 4, 5, 5, 6, 6, 4, 6, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 8, 6, 8, 6, 11, 9, 8, 8, 8, 8, 8, 9, 9, 4, 5, 9, 8, 11, 9, 9, 8, 10, 9, 7, 7, 8, 9, 11, 7, 7, 7, 6, 11, 6, 6, 6, 4, 7, 7, 7, 8, 7, 5, 7, 8, 4, 3, 7, 4, 10, 8, 7, 7, 8, 6, 6, 5, 7, 7, 11, 7, 7, 6, 6, 6, 6, 9, 6 },
            { 4, 4, 4, 8, 7, 12, 11, 4, 5, 5, 7, 7, 4, 7, 4, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 4, 4, 8, 7, 8, 7, 12, 9, 9, 9, 9, 8, 8, 10, 9, 3, 5, 8, 8, 11, 9, 10, 8, 10, 8, 8, 9, 9, 9, 11, 8, 9, 9, 7, 12, 7, 7, 7, 4, 7, 8, 8, 8, 8, 4, 8, 7, 3, 4, 7, 3, 11, 7, 8, 8, 8, 5, 8, 4, 7, 7, 11, 7, 7, 7, 7, 7, 7, 8, 7 },
            { 5, 5, 5, 10, 9, 13, 11, 5, 6, 6, 7, 8, 5, 8, 5, 6, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 8, 8, 8, 8, 13, 9, 9, 9, 9, 9, 8, 10, 9, 3, 5, 9, 8, 11, 9, 10, 8, 10, 9, 9, 9, 9, 9, 11, 8, 9, 10, 7, 12, 7, 8, 7, 5, 7, 8, 8, 8, 8, 4, 8, 7, 3, 4, 8, 4, 12, 8, 7, 8, 8, 6, 6, 4, 7, 7, 11, 8, 8, 7, 7, 7, 7, 11, 7 },
            { 5, 5, 5, 10, 9, 13, 11, 5, 6, 6, 7, 8, 5, 8, 5, 6, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 8, 8, 8, 8, 13, 9, 9, 9, 9, 9, 8, 10, 9, 3, 5, 9, 8, 11, 9, 10, 8, 10, 9, 9, 9, 9, 9, 11, 8, 9, 10, 7, 12, 7, 8, 8, 5, 7, 8, 8, 8, 8, 4, 8, 7, 3, 4, 8, 4, 12, 8, 7, 8, 8, 6, 6, 4, 7, 7, 11, 8, 8, 7, 7, 7, 7, 11, 8 },
            { 5, 5, 5, 10, 9, 15, 13, 5, 5, 5, 9, 9, 5, 9, 5, 7, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 8, 9, 8, 9, 14, 12, 12, 12, 12, 11, 10, 12, 10, 5, 7, 12, 10, 15, 12, 13, 11, 13, 11, 10, 11, 13, 13, 14, 12, 11, 10, 8, 17, 8, 9, 8, 5, 8, 9, 8, 9, 8, 6, 9, 9, 4, 5, 9, 4, 14, 9, 9, 9, 9, 7, 8, 6, 9, 9, 11, 8, 9, 7,
                    8, 8, 8, 12, 8 },
            { 5, 5, 5, 10, 9, 15, 13, 5, 5, 5, 9, 9, 5, 9, 5, 7, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 8, 9, 8, 9, 14, 12, 12, 12, 12, 11, 10, 12, 10, 5, 7, 12, 10, 15, 12, 13, 11, 13, 11, 10, 11, 13, 13, 14, 12, 11, 10, 8, 17, 8, 9, 9, 5, 8, 9, 8, 9, 8, 6, 9, 9, 4, 5, 9, 4, 14, 9, 9, 9, 9, 7, 8, 6, 9, 9, 11, 8, 9, 7,
                    8, 8, 8, 12, 9 },
            { 6, 8, 8, 15, 11, 17, 15, 5, 9, 9, 9, 11, 5, 11, 5, 6, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 6, 6, 11, 10, 11, 9, 18, 14, 12, 12, 13, 12, 11, 13, 14, 7, 8, 14, 11, 17, 14, 13, 11, 13, 12, 11, 14, 14, 13, 17, 12, 12, 11, 9, 17, 9, 18, 9, 11, 9, 10, 9, 10, 10, 7, 10, 10, 5, 5, 10, 5, 15, 10, 10, 10, 10,
                    8, 9, 7, 10, 10, 14, 11, 11, 8, 11, 11, 11, 14, 9 },
            { 6, 6, 6, 13, 11, 15, 14, 6, 6, 6, 9, 10, 6, 10, 6, 6, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 6, 6, 9, 9, 9, 11, 17, 11, 11, 11, 12, 11, 10, 12, 12, 5, 7, 12, 10, 15, 13, 13, 10, 14, 12, 11, 11, 13, 13, 16, 12, 11, 10, 9, 17, 9, 10, 10, 6, 9, 10, 9, 9, 9, 6, 10, 10, 5, 5, 10, 5, 14, 10, 9, 9, 10, 8, 8,
                    6, 10, 10, 12, 10, 10, 8, 9, 9, 9, 13, 10 } };
    private static int[][] gungsuh = {
            { 4, 3, 4, 6, 7, 9, 7, 3, 5, 5, 6, 6, 3, 6, 3, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 7, 6, 7, 6, 7, 7, 7, 8, 7, 7, 7, 8, 7, 5, 6, 7, 6, 7, 7, 8, 7, 8, 7, 8, 7, 7, 7, 7, 7, 7, 8, 4, 9, 4, 4, 6, 3, 7, 7, 8, 7, 8, 5, 7, 7, 5, 6, 6, 5, 7, 7, 7, 7, 7, 6, 8, 6, 7, 7, 7, 6, 7, 8, 5, 3, 5, 6, 6 },
            { 4, 4, 5, 7, 7, 9, 7, 4, 5, 5, 6, 6, 4, 6, 4, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 8, 6, 8, 6, 8, 7, 7, 8, 8, 7, 6, 8, 7, 5, 6, 7, 7, 7, 7, 8, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 8, 6, 6, 6, 4, 7, 7, 8, 7, 7, 5, 7, 7, 5, 5, 6, 5, 7, 6, 8, 7, 7, 5, 7, 4, 7, 7, 7, 7, 7, 7, 6, 6, 6, 9, 6 },
            { 4, 4, 5, 7, 7, 9, 7, 4, 5, 5, 6, 6, 4, 6, 4, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 8, 6, 8, 6, 8, 7, 7, 8, 8, 7, 6, 8, 7, 5, 6, 7, 7, 7, 7, 8, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 8, 6, 6, 7, 4, 7, 7, 8, 7, 7, 5, 7, 7, 5, 5, 6, 5, 7, 6, 8, 7, 7, 5, 7, 4, 7, 7, 7, 7, 7, 7, 6, 6, 6, 9, 7 },
            { 5, 5, 5, 8, 7, 10, 8, 5, 5, 5, 7, 7, 5, 7, 5, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 5, 5, 8, 7, 8, 7, 9, 8, 8, 9, 8, 8, 7, 8, 7, 5, 7, 8, 8, 9, 8, 9, 8, 9, 8, 8, 7, 8, 7, 9, 7, 7, 8, 7, 11, 7, 7, 7, 4, 8, 8, 8, 8, 8, 5, 8, 8, 5, 5, 7, 5, 9, 7, 9, 8, 8, 5, 8, 5, 8, 7, 9, 7, 7, 8, 7, 7, 7, 11, 7 },
            { 5, 5, 5, 8, 7, 10, 8, 5, 5, 5, 7, 7, 5, 7, 5, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 5, 5, 9, 7, 9, 7, 9, 8, 8, 9, 8, 8, 7, 8, 7, 5, 7, 8, 8, 9, 8, 9, 8, 9, 8, 8, 7, 8, 7, 9, 7, 7, 8, 7, 11, 7, 7, 8, 4, 8, 8, 8, 8, 8, 5, 8, 8, 5, 5, 7, 5, 9, 7, 9, 8, 8, 5, 8, 5, 8, 7, 9, 7, 7, 8, 7, 7, 7, 11, 8 },
            { 5, 5, 7, 11, 10, 11, 9, 5, 6, 6, 8, 9, 5, 9, 5, 7, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 9, 9, 9, 9, 11, 9, 9, 9, 9, 9, 8, 10, 9, 6, 8, 9, 8, 10, 9, 10, 9, 10, 9, 10, 8, 9, 9, 10, 9, 10, 9, 8, 12, 8, 8, 8, 5, 9, 9, 10, 9, 10, 6, 9, 9, 6, 6, 9, 6, 10, 9, 10, 9, 9, 8, 9, 8, 9, 9, 10, 8, 9, 9, 8, 8, 8, 12, 8 },
            { 5, 5, 7, 11, 10, 11, 9, 5, 6, 6, 8, 9, 5, 9, 5, 7, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 10, 9, 10, 9, 11, 9, 9, 9, 9, 9, 8, 10, 9, 6, 8, 9, 8, 10, 9, 10, 9, 10, 9, 10, 8, 9, 9, 10, 9, 10, 9, 8, 12, 8, 8, 9, 5, 9, 9, 10, 9, 10, 6, 9, 9, 6, 6, 9, 6, 10, 9, 10, 9, 9, 8, 9, 8, 9, 9, 10, 8, 9, 9, 8, 8, 8, 12,
                    9 },
            { 6, 6, 7, 11, 11, 12, 11, 5, 7, 7, 10, 10, 6, 10, 6, 7, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 6, 6, 11, 10, 11, 10, 12, 11, 11, 11, 11, 11, 11, 11, 12, 8, 9, 13, 11, 15, 13, 13, 11, 13, 12, 11, 10, 13, 14, 16, 11, 12, 11, 9, 16, 9, 10, 9, 6, 10, 12, 11, 11, 11, 8, 11, 10, 6, 7, 10, 6, 14, 10, 12, 11,
                    10, 10, 10, 8, 10, 10, 13, 9, 10, 10, 9, 9, 9, 14, 9 },
            { 6, 6, 7, 11, 11, 12, 11, 5, 7, 7, 10, 10, 6, 10, 6, 7, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 6, 6, 11, 10, 11, 10, 12, 11, 11, 11, 11, 11, 11, 11, 12, 8, 9, 13, 11, 15, 13, 13, 11, 13, 12, 11, 10, 13, 14, 16, 11, 12, 11, 9, 16, 9, 10, 10, 6, 10, 12, 11, 11, 11, 8, 11, 10, 6, 7, 10, 6, 14, 10, 12, 11,
                    10, 10, 10, 8, 10, 10, 13, 9, 10, 10, 9, 9, 9, 14, 10 } };
    private static int[][] arial = {
            { 3, 2, 4, 6, 6, 10, 7, 2, 4, 4, 4, 6, 3, 4, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 6, 6, 6, 6, 11, 8, 7, 7, 7, 6, 6, 8, 7, 2, 5, 7, 6, 8, 7, 8, 6, 8, 7, 7, 6, 7, 8, 10, 7, 8, 7, 3, 3, 3, 5, 6, 4, 6, 6, 6, 6, 6, 4, 6, 6, 2, 2, 5, 2, 8, 6, 6, 6, 6, 4, 6, 3, 6, 6, 10, 6, 6, 6, 4, 2, 4, 6, 6 },
            { 3, 3, 4, 7, 7, 11, 8, 2, 4, 4, 5, 7, 3, 4, 3, 3, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 3, 3, 7, 7, 7, 7, 12, 7, 8, 9, 9, 8, 7, 9, 9, 3, 6, 8, 7, 9, 9, 9, 8, 9, 9, 8, 7, 9, 7, 11, 7, 7, 7, 3, 3, 3, 5, 7, 4, 7, 7, 6, 7, 7, 3, 7, 7, 3, 3, 6, 3, 11, 7, 7, 7, 7, 4, 7, 3, 7, 5, 9, 5, 5, 5, 4, 3, 4, 7, 6 },
            { 4, 3, 5, 7, 7, 12, 9, 2, 4, 4, 5, 8, 4, 4, 4, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 4, 4, 8, 8, 8, 7, 13, 9, 9, 9, 9, 9, 8, 10, 9, 3, 6, 9, 7, 11, 9, 10, 9, 10, 9, 9, 7, 9, 9, 13, 7, 9, 7, 4, 4, 4, 5, 7, 4, 7, 7, 7, 7, 7, 3, 7, 7, 3, 3, 7, 3, 11, 7, 7, 7, 7, 4, 7, 4, 7, 5, 9, 7, 7, 7, 4, 3, 4, 8, 8 },
            { 4, 5, 5, 8, 8, 12, 9, 3, 5, 5, 5, 8, 4, 5, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 8, 8, 8, 8, 14, 9, 9, 10, 10, 9, 9, 11, 9, 3, 6, 9, 8, 11, 9, 11, 9, 11, 10, 9, 9, 9, 9, 13, 8, 9, 8, 4, 4, 4, 5, 8, 5, 8, 8, 7, 8, 8, 4, 8, 8, 3, 3, 7, 3, 11, 8, 8, 8, 8, 5, 7, 4, 8, 7, 9, 6, 7, 6, 5, 3, 5, 8, 7 },
            { 4, 5, 5, 8, 8, 13, 10, 3, 5, 5, 6, 9, 4, 5, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 9, 9, 9, 8, 15, 9, 10, 11, 11, 10, 9, 11, 10, 3, 7, 10, 8, 11, 10, 12, 10, 12, 11, 10, 9, 10, 9, 15, 9, 9, 8, 4, 4, 4, 5, 8, 5, 8, 8, 8, 8, 8, 4, 8, 8, 3, 3, 7, 3, 13, 8, 8, 8, 8, 5, 8, 4, 8, 7, 11, 7, 7, 8, 5, 3, 5, 9,
                    8 },
            { 4, 5, 6, 9, 9, 14, 11, 3, 5, 5, 6, 9, 4, 5, 4, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 9, 9, 9, 9, 16, 11, 11, 12, 12, 11, 10, 12, 11, 3, 8, 11, 9, 13, 11, 12, 11, 12, 11, 11, 9, 11, 11, 15, 11, 9, 9, 4, 4, 4, 7, 9, 5, 9, 9, 8, 9, 9, 4, 9, 8, 4, 3, 8, 3, 13, 8, 9, 9, 9, 5, 8, 4, 8, 7, 11, 7, 7, 7, 5, 3,
                    5, 9, 8 },
            { 5, 5, 6, 9, 9, 15, 11, 3, 6, 6, 7, 10, 5, 6, 5, 5, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 10, 10, 10, 9, 17, 11, 11, 12, 12, 11, 10, 12, 11, 5, 9, 11, 9, 13, 11, 12, 11, 12, 11, 11, 9, 11, 11, 17, 11, 11, 9, 5, 5, 5, 7, 9, 6, 9, 9, 9, 9, 9, 5, 9, 9, 4, 3, 8, 3, 13, 9, 9, 9, 9, 6, 8, 4, 9, 7, 11, 7, 9, 8, 6,
                    5, 6, 10, 9 },
            { 5, 6, 6, 10, 10, 16, 12, 3, 6, 6, 7, 11, 5, 6, 5, 5, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 5, 5, 11, 11, 11, 10, 18, 11, 12, 13, 13, 12, 11, 14, 13, 4, 9, 12, 10, 15, 13, 14, 12, 14, 13, 12, 12, 13, 11, 17, 11, 12, 11, 5, 5, 5, 7, 10, 6, 10, 10, 9, 10, 10, 5, 10, 10, 4, 4, 9, 4, 14, 10, 10, 10, 10, 6,
                    9, 5, 10, 9, 13, 8, 9, 8, 6, 6, 6, 11, 9 },
            { 5, 6, 7, 11, 11, 17, 13, 4, 6, 6, 7, 11, 5, 6, 5, 5, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 5, 5, 11, 11, 11, 11, 19, 13, 13, 14, 14, 13, 12, 15, 13, 6, 10, 13, 11, 15, 13, 15, 13, 15, 14, 13, 12, 13, 13, 19, 13, 12, 12, 5, 5, 5, 7, 11, 6, 10, 11, 10, 11, 11, 6, 11, 10, 4, 4, 9, 4, 16, 10, 11, 11, 11,
                    6, 10, 5, 10, 9, 13, 9, 9, 9, 6, 6, 6, 11, 10 } };
    private static int[][] tahoma = {
            { 3, 4, 4, 8, 6, 11, 7, 2, 4, 4, 6, 8, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 8, 8, 8, 5, 10, 7, 6, 7, 7, 6, 6, 7, 7, 4, 5, 6, 5, 8, 7, 8, 6, 8, 7, 6, 6, 7, 6, 10, 6, 6, 6, 4, 11, 4, 8, 6, 6, 6, 6, 5, 6, 6, 4, 6, 6, 2, 3, 5, 2, 8, 6, 6, 6, 6, 4, 5, 4, 6, 6, 8, 6, 6, 5, 5, 4, 5, 8, 6 },
            { 4, 4, 5, 9, 7, 12, 8, 3, 5, 5, 7, 8, 4, 4, 4, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 4, 4, 9, 9, 9, 6, 11, 8, 7, 7, 8, 7, 6, 8, 8, 4, 5, 7, 6, 9, 8, 9, 7, 9, 7, 7, 8, 8, 8, 12, 7, 8, 7, 5, 11, 5, 9, 7, 7, 6, 7, 6, 7, 7, 4, 7, 7, 2, 3, 6, 2, 10, 7, 7, 7, 7, 4, 5, 5, 7, 6, 10, 6, 6, 5, 6, 5, 6, 9, 6 },
            { 4, 4, 5, 9, 7, 12, 9, 3, 5, 5, 8, 8, 4, 5, 4, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 5, 5, 9, 9, 9, 6, 12, 8, 7, 8, 8, 7, 7, 8, 8, 4, 5, 7, 6, 10, 8, 9, 7, 9, 8, 8, 8, 8, 8, 12, 8, 7, 7, 5, 14, 5, 9, 7, 7, 7, 7, 6, 7, 7, 4, 7, 7, 3, 4, 6, 3, 11, 7, 7, 7, 7, 5, 6, 4, 7, 6, 10, 6, 6, 6, 6, 6, 6, 9, 8 },
            { 4, 4, 6, 10, 8, 14, 9, 3, 5, 5, 8, 10, 4, 5, 4, 5, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 10, 10, 10, 7, 13, 8, 8, 9, 10, 8, 7, 9, 9, 4, 6, 8, 7, 10, 9, 10, 8, 10, 9, 8, 8, 9, 8, 14, 8, 8, 8, 5, 14, 5, 10, 8, 8, 7, 8, 7, 8, 7, 4, 8, 8, 2, 4, 7, 2, 12, 8, 8, 8, 8, 5, 6, 5, 8, 8, 10, 8, 8, 6, 7, 5, 7, 10, 7 },
            { 5, 4, 6, 11, 8, 15, 10, 3, 6, 6, 8, 11, 5, 5, 5, 6, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 11, 11, 11, 7, 14, 9, 9, 9, 10, 8, 8, 10, 10, 6, 6, 9, 7, 12, 10, 11, 8, 11, 9, 8, 10, 10, 9, 14, 9, 10, 8, 6, 14, 6, 11, 8, 8, 8, 8, 7, 8, 8, 5, 8, 8, 2, 4, 7, 2, 13, 8, 8, 8, 8, 5, 7, 5, 8, 8, 10, 8, 8, 7, 7, 6, 7,
                    11, 8 },
            { 5, 4, 6, 12, 9, 16, 11, 3, 6, 6, 9, 12, 5, 6, 5, 6, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 12, 12, 12, 8, 15, 11, 9, 10, 11, 9, 8, 11, 11, 6, 7, 9, 8, 12, 11, 12, 9, 12, 10, 9, 10, 11, 10, 14, 9, 10, 9, 6, 14, 6, 12, 9, 9, 8, 9, 7, 9, 8, 5, 9, 9, 4, 5, 8, 4, 14, 9, 9, 9, 9, 6, 7, 5, 9, 8, 12, 8, 8, 7, 8, 6,
                    8, 12, 8 },
            { 5, 6, 7, 12, 9, 17, 11, 4, 7, 7, 9, 12, 5, 6, 5, 7, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 12, 12, 12, 8, 15, 11, 10, 10, 12, 10, 9, 11, 11, 6, 7, 10, 8, 13, 11, 12, 9, 12, 11, 9, 10, 11, 10, 15, 10, 10, 10, 7, 14, 7, 12, 9, 9, 9, 9, 8, 9, 9, 5, 9, 9, 4, 5, 8, 4, 14, 9, 9, 9, 9, 6, 8, 6, 9, 8, 13, 8, 8, 8,
                    8, 7, 8, 12, 9 },
            { 6, 6, 7, 13, 10, 18, 12, 4, 7, 7, 10, 13, 5, 7, 5, 7, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 6, 6, 13, 13, 13, 9, 16, 11, 11, 11, 12, 10, 9, 12, 12, 7, 8, 11, 9, 14, 12, 13, 10, 13, 11, 10, 11, 12, 11, 16, 10, 10, 10, 7, 17, 7, 13, 10, 10, 9, 10, 8, 10, 9, 6, 10, 10, 4, 5, 9, 4, 15, 10, 10, 10, 10, 6,
                    8, 6, 10, 9, 13, 9, 9, 8, 9, 7, 9, 13, 9 },
            { 6, 6, 8, 14, 10, 19, 13, 4, 7, 7, 10, 14, 6, 7, 6, 7, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 7, 7, 14, 14, 14, 9, 17, 11, 11, 11, 13, 11, 10, 13, 13, 7, 8, 11, 9, 15, 13, 13, 10, 13, 12, 11, 11, 12, 11, 17, 11, 11, 11, 7, 17, 7, 14, 10, 10, 10, 11, 9, 11, 10, 6, 11, 11, 4, 5, 9, 4, 16, 11, 10, 11, 11,
                    7, 8, 6, 11, 9, 14, 9, 9, 8, 9, 7, 9, 14, 10 } };
    private static int[][] times = {
            { 3, 4, 5, 6, 6, 9, 9, 2, 4, 4, 6, 6, 3, 4, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 6, 6, 6, 5, 10, 8, 7, 7, 8, 7, 6, 7, 8, 4, 4, 8, 7, 10, 8, 8, 7, 8, 7, 5, 8, 8, 7, 11, 8, 8, 7, 4, 3, 4, 5, 6, 4, 5, 5, 5, 5, 5, 4, 5, 6, 3, 3, 6, 3, 9, 6, 6, 6, 5, 4, 4, 4, 5, 6, 7, 6, 6, 5, 5, 2, 5, 6, 6 },
            { 3, 4, 5, 6, 6, 10, 9, 2, 4, 4, 6, 7, 3, 4, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 7, 7, 7, 5, 11, 9, 8, 8, 9, 7, 7, 9, 9, 4, 5, 9, 7, 12, 9, 9, 7, 9, 8, 6, 8, 9, 8, 11, 9, 8, 8, 4, 3, 4, 6, 6, 4, 5, 6, 5, 6, 5, 4, 5, 6, 3, 3, 6, 3, 9, 6, 6, 7, 6, 4, 5, 4, 6, 6, 9, 5, 7, 6, 6, 2, 6, 6, 6 },
            { 3, 4, 6, 7, 6, 11, 10, 2, 4, 4, 7, 7, 3, 4, 3, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 4, 7, 7, 7, 6, 12, 10, 8, 8, 9, 7, 7, 8, 9, 4, 5, 9, 7, 12, 9, 9, 7, 9, 8, 7, 8, 9, 8, 13, 9, 8, 8, 4, 4, 4, 6, 7, 4, 6, 7, 6, 7, 6, 4, 7, 7, 3, 3, 6, 3, 9, 7, 7, 7, 7, 4, 6, 4, 7, 7, 9, 5, 7, 5, 6, 2, 6, 7, 8 },
            { 4, 5, 5, 7, 7, 12, 11, 3, 5, 5, 7, 8, 4, 5, 4, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 3, 4, 8, 8, 8, 6, 13, 9, 8, 9, 10, 8, 8, 10, 9, 5, 6, 9, 8, 12, 10, 10, 8, 10, 9, 8, 9, 9, 9, 13, 10, 9, 8, 5, 4, 5, 6, 7, 4, 6, 7, 7, 7, 6, 5, 7, 7, 3, 3, 7, 3, 11, 7, 7, 7, 7, 5, 6, 4, 7, 7, 11, 7, 7, 6, 7, 3, 7, 8, 7 },
            { 4, 5, 5, 8, 7, 13, 12, 3, 5, 5, 7, 8, 3, 5, 4, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 3, 4, 8, 8, 8, 7, 14, 11, 10, 10, 11, 9, 8, 10, 11, 5, 6, 11, 9, 13, 11, 11, 9, 11, 10, 8, 9, 11, 11, 14, 10, 11, 9, 5, 4, 5, 6, 8, 4, 7, 7, 7, 7, 7, 5, 7, 7, 3, 3, 7, 3, 11, 7, 7, 7, 7, 5, 6, 4, 7, 7, 11, 7, 7, 6, 7, 3, 7,
                    8, 8 },
            { 4, 5, 5, 8, 8, 13, 12, 3, 5, 5, 8, 9, 4, 6, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 4, 9, 9, 9, 7, 15, 11, 10, 11, 11, 9, 9, 11, 11, 5, 6, 12, 9, 14, 12, 12, 9, 12, 10, 9, 9, 11, 11, 15, 11, 11, 9, 5, 4, 5, 8, 8, 5, 7, 8, 7, 8, 7, 4, 7, 7, 3, 4, 8, 3, 11, 7, 8, 8, 8, 5, 6, 4, 7, 7, 11, 7, 7, 6, 7, 3, 8,
                    9, 8 },
            { 4, 5, 5, 9, 9, 14, 13, 3, 6, 6, 9, 10, 4, 6, 4, 5, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 4, 10, 10, 10, 7, 15, 11, 11, 11, 12, 10, 9, 12, 12, 5, 7, 12, 10, 15, 12, 12, 10, 12, 11, 9, 9, 12, 11, 16, 12, 11, 10, 5, 5, 5, 8, 9, 6, 7, 8, 8, 8, 8, 6, 8, 8, 5, 5, 8, 5, 13, 8, 9, 8, 8, 6, 7, 5, 8, 7, 11, 8, 8, 7, 8,
                    3, 8, 9, 9 },
            { 5, 6, 7, 9, 9, 15, 14, 4, 6, 6, 9, 10, 5, 6, 5, 5, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 5, 10, 10, 10, 8, 16, 12, 12, 12, 13, 11, 10, 13, 13, 6, 7, 13, 11, 16, 13, 13, 11, 13, 12, 10, 12, 13, 12, 17, 13, 13, 11, 6, 5, 6, 8, 9, 6, 8, 9, 8, 9, 8, 6, 8, 9, 4, 5, 9, 4, 14, 9, 9, 9, 9, 6, 7, 5, 9, 9, 13, 8, 9, 8,
                    9, 3, 9, 10, 9 },
            { 5, 6, 8, 10, 9, 16, 15, 4, 6, 6, 9, 11, 5, 6, 5, 5, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 5, 11, 11, 11, 8, 17, 13, 12, 13, 13, 11, 11, 14, 13, 6, 7, 13, 11, 16, 13, 14, 11, 14, 13, 11, 12, 13, 13, 18, 13, 13, 11, 6, 5, 6, 8, 10, 6, 8, 10, 9, 10, 8, 6, 9, 9, 4, 4, 9, 4, 14, 9, 10, 10, 10, 6, 8, 5, 9, 9, 13,
                    9, 9, 8, 9, 3, 9, 10, 10 } };
    private static int[][] verdana = {
            { 4, 4, 5, 9, 7, 12, 8, 3, 5, 5, 7, 9, 4, 5, 4, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 5, 5, 9, 9, 9, 6, 10, 8, 8, 9, 9, 7, 6, 9, 8, 5, 5, 8, 6, 9, 8, 9, 7, 9, 8, 8, 7, 8, 8, 11, 8, 7, 8, 5, 5, 5, 9, 7, 7, 7, 7, 6, 7, 7, 4, 7, 7, 3, 4, 7, 3, 11, 7, 7, 7, 7, 5, 6, 4, 7, 7, 9, 7, 7, 6, 7, 5, 7, 9, 6 },
            { 4, 5, 6, 10, 8, 13, 9, 3, 5, 5, 8, 9, 4, 5, 4, 5, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 9, 9, 9, 7, 12, 8, 8, 9, 9, 8, 7, 9, 9, 5, 5, 8, 7, 10, 9, 10, 8, 10, 8, 8, 7, 9, 8, 13, 8, 7, 8, 5, 5, 5, 10, 8, 8, 8, 8, 6, 8, 8, 4, 8, 8, 3, 4, 7, 3, 11, 8, 8, 8, 8, 5, 7, 5, 8, 7, 11, 7, 7, 7, 8, 5, 8, 10, 6 },
            { 5, 5, 5, 10, 8, 13, 9, 3, 6, 6, 9, 9, 5, 7, 5, 6, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 9, 9, 9, 7, 13, 9, 8, 9, 9, 8, 8, 9, 9, 5, 6, 8, 7, 11, 9, 10, 8, 10, 8, 9, 9, 9, 9, 13, 9, 9, 9, 6, 6, 6, 11, 8, 8, 8, 8, 8, 8, 8, 5, 8, 8, 3, 4, 7, 3, 11, 8, 8, 8, 8, 5, 7, 6, 8, 8, 11, 7, 8, 7, 8, 7, 8, 11, 8 },
            { 5, 6, 6, 11, 9, 15, 10, 4, 6, 6, 9, 11, 5, 7, 5, 6, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 11, 11, 11, 8, 14, 10, 10, 10, 11, 9, 8, 11, 10, 5, 6, 10, 8, 11, 10, 11, 8, 11, 10, 10, 9, 10, 10, 15, 10, 9, 10, 6, 6, 6, 11, 9, 9, 8, 9, 7, 9, 8, 5, 9, 9, 3, 5, 8, 3, 13, 9, 9, 9, 9, 6, 8, 6, 9, 8, 11, 9, 8, 8, 9,
                    6, 9, 11, 7 },
            { 5, 6, 7, 12, 10, 16, 11, 4, 7, 7, 10, 12, 5, 7, 5, 7, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 7, 7, 12, 12, 12, 8, 15, 10, 10, 11, 11, 9, 9, 12, 11, 5, 7, 10, 8, 13, 11, 12, 9, 12, 10, 10, 9, 11, 10, 15, 10, 9, 10, 7, 7, 7, 12, 10, 10, 9, 9, 8, 9, 9, 5, 9, 9, 3, 5, 9, 3, 15, 9, 10, 9, 9, 6, 8, 6, 9, 9,
                    13, 9, 9, 9, 10, 7, 10, 12, 8 },
            { 6, 6, 7, 13, 10, 17, 12, 4, 7, 7, 10, 13, 6, 7, 6, 7, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 7, 7, 13, 13, 13, 9, 16, 11, 11, 11, 12, 10, 9, 12, 12, 7, 7, 11, 9, 13, 12, 13, 10, 13, 11, 10, 10, 12, 11, 17, 11, 11, 11, 7, 7, 7, 13, 10, 10, 10, 10, 8, 10, 10, 6, 10, 10, 5, 6, 9, 5, 15, 10, 10, 10, 10, 6,
                    9, 7, 10, 9, 13, 9, 9, 9, 10, 7, 10, 13, 8 },
            { 6, 7, 8, 14, 11, 18, 12, 5, 8, 8, 11, 14, 6, 8, 6, 8, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 8, 8, 14, 14, 14, 9, 17, 12, 12, 12, 13, 11, 10, 13, 13, 8, 8, 12, 9, 14, 13, 13, 10, 13, 12, 12, 10, 12, 12, 17, 12, 10, 12, 8, 8, 8, 14, 11, 11, 10, 11, 9, 11, 10, 6, 11, 11, 5, 6, 10, 5, 17, 11, 10, 11, 11,
                    7, 9, 7, 11, 10, 14, 10, 10, 9, 11, 8, 11, 14, 9 },
            { 6, 7, 8, 15, 11, 19, 13, 5, 8, 8, 11, 15, 7, 8, 7, 8, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 8, 8, 15, 15, 15, 10, 18, 12, 12, 13, 14, 11, 10, 14, 14, 8, 8, 12, 10, 15, 13, 14, 11, 14, 13, 12, 11, 13, 12, 18, 12, 11, 12, 8, 8, 8, 15, 11, 11, 11, 11, 9, 11, 11, 6, 11, 11, 5, 6, 11, 5, 18, 11, 11, 11, 11,
                    8, 9, 7, 11, 11, 15, 11, 11, 9, 11, 8, 11, 15, 9 },
            { 7, 7, 9, 16, 12, 20, 14, 5, 9, 9, 12, 16, 7, 9, 7, 9, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 16, 16, 16, 10, 19, 13, 13, 13, 15, 12, 11, 15, 14, 8, 9, 13, 11, 16, 14, 15, 11, 15, 13, 13, 12, 14, 13, 19, 13, 12, 13, 9, 9, 9, 16, 12, 12, 11, 12, 10, 12, 11, 7, 12, 12, 6, 7, 11, 6, 18, 12, 12, 12,
                    12, 8, 10, 7, 12, 11, 16, 11, 11, 10, 12, 9, 12, 16, 10 } };
    
    public static String getUseOnOff(String value) {
        if ("0".equals(value)) {
            return "OFF";
        } else if ("1".equals(value)) {
            return "ON";
        }
        return "";
    }
    
    public static String getUseOnOffReverse(String value) {
        if ("0".equals(value)) {
            return "ON";
        } else if ("1".equals(value)) {
            return "OFF";
        }
        return "";
    }
    
    public static String getUrlByDepth(HttpServletRequest request, int Depth, String targetUrl) {
        String preUrl = request.getHeader("Referer");
        String[] urlArray = preUrl.split("\\?");
        String[] opernerUrlArray = urlArray[0].split("/");
        opernerUrlArray[Depth] = targetUrl;
        String url = StringUtils.join(opernerUrlArray, "/");
        return url;
    }
    
    public static String arraySum(int[] valuel) {
        int arrSum = 0;
        for (Integer control : valuel) {
            arrSum = arrSum + control;
        }
        return String.valueOf(arrSum);
    }
    
    public static String getBindStringFromMembers(String includeMemberString, String seperator, Map<String, Map<String, Object>> bindTypes, String typeKey) {
        
        String[] membersArray = StringUtils.split(includeMemberString, seperator);
        List<String> bindStringList = new ArrayList<>();
        for (String memberKey : membersArray) {
            bindStringList.add(Text.getBindType(bindTypes, typeKey, memberKey));
        }
        
        return StringUtils.join(bindStringList, ",");
    }
    
    public static String getReplaceCommaFromMembers(String includeMemberString, String seperator) {
        String returnStr = includeMemberString.replace(seperator, ",");
        return returnStr;
    }
    
    public static String getToPasswordString(String pass) {
        
        if (pass == null) {
            return "";
        }
        
        String output = "";
        for (int i = 0; i < pass.length(); i++) {
            output += "*";
        }
        
        return output;
    }
}
